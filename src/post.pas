//
//
// To compile do make 0f Makefile.post in the src directory
// To install - install -m 755 post ../log/post
//
//Copyright Larry Tyree, N6TR, 2011,2012,2013,2014,2015.
//
//This file is part of TR log for linux.
//
//TR log for linux is free software: you can redistribute it and/or
//modify it under the terms of the GNU General Public License as
//published by the Free Software Foundation, either version 2 of the
//License, or (at your option) any later version.
//
//TR log for linux is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General
//    Public License along with TR log for linux.  If not, see
//<http://www.gnu.org/licenses/>.
//

{$linklib curl}
{$linklib X11}
{$linklib c}
{$linklib gcc}

PROGRAM PostContestLogProcessing;

{ This program is used to do all the post contest processing of the
  LOG.DAT file generated by the logging program.                      }

{ See TR.PAS for revision log  }

USES {Overlay,
     PostOnit,}
     CThreads,
     memlinux,
     Dos,
     trCRT,
     Printer,
     Tree,              {   452 bytes of data }
     SlowTree,
     PostCab,           {   714 bytes of data }
     PostLog,           {   556 bytes of data }
     PostQSL,           {     4 bytes of data }
     PostRpt,           {  2050 bytes of data }
     PostSubs,          { 39752 bytes of data }
     PostUtl,           {    12 bytes of data }
     Country9,          {  1454 bytes of data }
     LogDupe,           {  3516 bytes of data }
     LogMenu,           {     6 bytes of data }
     ZoneCont,          {    50 bytes of data }
     linuxsound,
     keycode,
     Logwind;           {  4666 bytes of data }



PROCEDURE PostContestLogMassage;

    BEGIN
    ClearScreenAndTitle ('POST CONTEST LOG PROCESSOR');

    WriteLn ('This processor will step you through all the steps required to make sure your');
    WriteLn ('log is properly duped and that all the country multipliers are properly');
    WriteLn ('flagged.  It is a good idea to either run this procedure or at least the dupe');
    WriteLn ('flag procedure before generating any reports or final logs.');
    WriteLn;

    IF NOT FileExists (LogFileName) THEN
        BEGIN
        WriteLn ('I can not find the file ', LogFileName, '!!');
        WriteLn ('I hope this is just a small error on your part and that your log has not been');
        WriteLn ('erased.  Please use the F command on the next menu you will see to enter the');
        WriteLn ('correct file name.');
        WaitForKeyPressed;
        Exit;
        END
    ELSE
        WriteLn (LogFileName, ' has been found.');

    IF NOT CheckForTempFile THEN Exit;

    WaitForKeyPressed;

    ClearScreenAndTitle ('POST CONTEST LOG PROCESSOR');

    WriteLn ('The next step will be to check the log carefully for dupes.');
    WaitForKeyPressed;

    IF NOT DupeLog THEN
        BEGIN
        REPEAT
            Key := UpCase (GetKey ('Do you want to stop this procedure now? (Y/N) :  '));
            IF Key = EscapeKey THEN Exit;
        UNTIL (Key = 'Y') OR (Key = 'N');
        IF Key = 'Y' THEN Exit;
        END;

    ClearScreenAndTitle ('POST CONTEST LOG PROCESSOR');

    WriteLn ('The next step should only be done if your log has DX multipliers (countries).');
    WriteLn ('If so, we will look at each QSO in your log and determine the country from');
    WriteLn ('the callsign.  If the country cannot be determined from the callsign, you will');
    WriteLn ('be given the chance to enter the proper country.  Also, the multiplier column');
    WriteLn ('is examined to make sure no duplicate or missing multipliers exist.');
    WriteLn;

    REPEAT
        Key := UpCase (GetKey ('Do you want to perform the multiplier check (Y/N) : '));
        IF Key = EscapeKey THEN Exit;
    UNTIL (Key = 'Y') OR (Key = 'N');
    WriteLn;

    IF Key = 'Y' THEN MultCheck;

    ClearScreenAndTitle ('POST CONTEST LOG PROCESSOR');

    WriteLn ('You have completed the Post Contest Log Massage.  After you have made any    ');
    WriteLn ('necessary changes, execute the Create Band and/or Mode Log command under the');
    WriteLn ('LOG PROCEDURE MENU.  This will generate page numbers, running totals of QSOs,');
    WriteLn ('QSO points and multiplier totals at the bottom of each page.  Under the REPORT');
    WriteLn ('PROCEDURE menu you will find procedures to generate dupe sheets, rate sheets');
    WriteLn ('and some other interesting reports.  For ARRL contests, the A command under the');
    WriteLn ('LOG PROCEDURE MENU will generate a file you can send to the ARRL instead of a');
    WriteLn ('log and dupesheet.');
    WriteLn;
    WaitForKeyPressed;
    END;




PROCEDURE Init;

VAR Band: BandType;
    Mode: ModeType;

    BEGIN
    FOR Band := Band160 TO All DO
        FOR Mode := CW TO Both DO
            BEGIN
            LogFileQSOsPrinted^ [Band, Mode] := 0;
            LogFileQSOPoints^   [Band, Mode] := 0;
            PageQSOPoints^      [Band, Mode] := 0;
            PageValidContacts^  [Band, Mode] := 0;
            TotalDomesticMults^ [Band, Mode] := 0;
            TotalDXMults^       [Band, Mode] := 0;
            TotalPrefixMults^   [Band, Mode] := 0;
            TotalZoneMults^     [Band, Mode] := 0;
            ValidContacts^      [Band, Mode] := 0;

            NumberPageDomesticMults^  [Band, Mode] := 0;
            NumberPageDXMults^        [Band, Mode] := 0;
            NumberPagePrefixMults^    [Band, Mode] := 0;
            NumberPageZoneMults^      [Band, Mode] := 0;
            END;

    DoingDomesticMults := False;
    DoingDXMults       := False;
    DoingPrefixMults   := False;
    DoingZoneMults     := False;
    NumberBufferCalls  := 0;
    NumberLogFilesOpen := 0;
    LastNewList        := 0;
    QSOByBandAndModeDetermined := False;

    END;



PROCEDURE MainScreen;

    BEGIN
    ClearScreenAndTitle ('TR POST CONTEST PROGRAM  Version ' + PostVersion);

    WriteLn ('Welcome to the TR Post Contest Program.  You will find many procedures and ');
    WriteLn ('utilities here to help you after the contest.  There are a number of procedures');
    WriteLn ('under the Log procedures menu.  These will perform various things to your log');
    WriteLn ('file.  The QSL procedures menu has everything you need to support QSLing.  The');
    WriteLn ('Report procedures menu has a number of different reports that can be generated');
    WriteLn ('and finally the Utility procedures menu has a number of little programs to make');
    WriteLn ('your life easier.  To get more information on any of these, go into the desired');
    WriteLn ('menu and execute the procedure you are interested in.  An explanation of the');
    WriteLn ('procedure will be displayed and you will always be able to exit the procedure');
    WriteLn ('before actually doing anything (use ESCAPE or RETURN with no input).');
    WriteLn;
    WriteLn ('Free memory = ', MaxAvail);
    WriteLn;
    Write   ('  F - Change active log filename (active logfile = ');
    TextColor (Yellow);
    Write   (LogFileName);
    TextColor (Cyan);
    WriteLn (').');
    WriteLn ('  C - Create Cabrillo File.');
    WriteLn ('  L - Log procedures menu.');
    WriteLn ('  P - Post contest log processor (steps you through most everything).');
    WriteLn ('  Q - QSL procedures menu.');
    WriteLn ('  R - Report procedures menu.');
    WriteLn ('  U - Utility procedures menu.');
    WriteLn ('  X - Exit program.');
    WriteLn;

    TextColor (Cyan);
    Write   ('  Enter command : ');

    REPEAT
        REPEAT UNTIL KeyPressed;
        Key := UpCase (ReadKey);

        CASE Key OF
            'C': BEGIN
                 CreateCabrilloFile;
                 Exit;
                 END;

            'F': BEGIN
                 LogFileName := GetResponse ('Enter new active logfile (none to use menu) : ');

                 IF LogFileName = '' THEN
                     BEGIN
                     LogFilename := SelectAvailableLog;

                     IF (LogFileName = 'LOGCFG') OR (LogFileName = '') THEN
                         LogFileName := 'LOG.DAT'
                     ELSE
                         LogFileName := LogFileName + '.DAT';
                     END;

                 Exit;
                 END;

            'L': BEGIN
                 REPEAT UNTIL NOT LogProcedureMenu;
                 Exit;
                 END;

            'P': BEGIN
                 PostContestLogMassage;
                 Exit;
                 END;

            'Q': BEGIN
                 REPEAT UNTIL NOT QSLProcedureMenu;
                 Exit;
                 END;

            'R': BEGIN
                 REPEAT UNTIL NOT ReportProcedureMenu;
                 Exit;
                 END;

            'U': BEGIN
                 REPEAT UNTIL NOT UtilityMenu;
                 Exit;
                 END;

            'X', EscapeKey: BEGIN
                            NormVideo;
                            ClrScr;
                            Halt;
                            END;

            END;
    UNTIL False;
    END;



    BEGIN


    LNoSound;
    ClrScr;

    WriteLn ('Initializing...');

    IF NOT CountryTable.LoadInCountryFile THEN
        BEGIN
        ReportError ('Unable to load CTY.DAT file.');
        Halt;
        END;

    CWEnable := True;
    LogTotalsAccurate := False;

    IF ParamCount > 0 THEN
        LogFileName := ParamStr (1)
    ELSE
        LogFileName := 'LOG.DAT';

    ClrScr;

    New (LogFileQSOPoints);
    New (LogFileQSOsPrinted);

    New (PageQSOPoints);
    New (PageValidContacts);

    New (TotalDomesticMults);
    New (TotalDXMults);
    New (TotalPrefixMults);
    New (TotalZoneMults);

    New (NumberPageDomesticMults);
    New (NumberPageDXMults);
    New (NumberPagePrefixMults);
    New (NumberPageZoneMults);

    New (ValidContacts);

    LogFilename := SelectAvailableLog;

    IF (LogFileName = 'LOGCFG') OR (LogFileName = '') THEN
        LogFileName := 'LOG.DAT'
    ELSE
        LogFileName := LogFileName + '.DAT';

    REPEAT
        Init;
        MainScreen;
        ClrScr;
    UNTIL False;
    END.
